[2020-03-21 18:24:26,918] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-03-21 18:24:52,794] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-03-21 18:24:52,959] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-03-21 18:24:52,960] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-03-21 18:24:52,992] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-03-21 18:24:53,010] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-03-21 18:24:53,019] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-03-21 18:24:53,122] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 24) (kafka.controller.KafkaController)
[2020-03-21 18:24:53,129] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2020-03-21 18:24:53,141] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-03-21 18:24:53,168] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-03-21 18:24:53,170] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2020-03-21 18:24:53,171] INFO [Controller id=0] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2020-03-21 18:24:53,172] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-03-21 18:24:53,173] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-03-21 18:24:53,180] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-03-21 18:24:53,181] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-03-21 18:24:53,182] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-03-21 18:24:53,183] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-03-21 18:24:53,185] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-03-21 18:24:53,223] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-03-21 18:24:53,225] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-03-21 18:24:53,241] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-03-21 18:24:53,242] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2020-03-21 18:24:53,244] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-03-21 18:24:53,247] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-03-21 18:24:53,270] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2020-03-21 18:24:53,271] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-03-21 18:24:53,283] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-03-21 18:24:53,284] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-03-21 18:24:53,285] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-03-21 18:24:53,286] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-03-21 18:24:53,288] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-03-21 18:24:53,331] INFO [RequestSendThread controllerId=0] Controller 0 connected to DESKTOP-Q5N5HTN:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-03-21 18:24:53,383] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-03-21 18:24:58,386] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-03-21 18:24:58,406] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-03-21 18:24:58,416] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-03-21 18:25:19,150] INFO [Controller id=0] New topics: [Set(dev1)], deleted topics: [Set()], new partition replica assignment [Map(dev1-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-03-21 18:25:19,151] INFO [Controller id=0] New partition creation callback for dev1-0 (kafka.controller.KafkaController)
[2020-03-21 18:29:58,424] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-03-21 18:29:58,426] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-03-21 18:29:58,427] DEBUG [Controller id=0] Preferred replicas by broker HashMap(0 -> Map(dev1-0 -> List(0))) (kafka.controller.KafkaController)
[2020-03-21 18:29:58,440] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-03-21 18:29:58,443] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-03-21 18:30:35,654] INFO [Controller id=0] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-03-21 18:30:35,685] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2020-03-21 18:34:58,444] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-03-21 18:34:58,444] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-03-21 18:34:58,447] DEBUG [Controller id=0] Preferred replicas by broker HashMap(0 -> HashMap(__consumer_offsets-22 -> List(0), __consumer_offsets-30 -> List(0), __consumer_offsets-25 -> List(0), __consumer_offsets-35 -> List(0), __consumer_offsets-37 -> List(0), __consumer_offsets-38 -> List(0), __consumer_offsets-13 -> List(0), dev1-0 -> List(0), __consumer_offsets-8 -> List(0), __consumer_offsets-21 -> List(0), __consumer_offsets-4 -> List(0), __consumer_offsets-27 -> List(0), __consumer_offsets-7 -> List(0), __consumer_offsets-9 -> List(0), __consumer_offsets-46 -> List(0), __consumer_offsets-41 -> List(0), __consumer_offsets-33 -> List(0), __consumer_offsets-23 -> List(0), __consumer_offsets-49 -> List(0), __consumer_offsets-47 -> List(0), __consumer_offsets-16 -> List(0), __consumer_offsets-28 -> List(0), __consumer_offsets-31 -> List(0), __consumer_offsets-36 -> List(0), __consumer_offsets-42 -> List(0), __consumer_offsets-3 -> List(0), __consumer_offsets-18 -> List(0), __consumer_offsets-15 -> List(0), __consumer_offsets-24 -> List(0), __consumer_offsets-17 -> List(0), __consumer_offsets-48 -> List(0), __consumer_offsets-19 -> List(0), __consumer_offsets-11 -> List(0), __consumer_offsets-2 -> List(0), __consumer_offsets-43 -> List(0), __consumer_offsets-6 -> List(0), __consumer_offsets-14 -> List(0), __consumer_offsets-20 -> List(0), __consumer_offsets-0 -> List(0), __consumer_offsets-44 -> List(0), __consumer_offsets-39 -> List(0), __consumer_offsets-12 -> List(0), __consumer_offsets-45 -> List(0), __consumer_offsets-1 -> List(0), __consumer_offsets-5 -> List(0), __consumer_offsets-26 -> List(0), __consumer_offsets-29 -> List(0), __consumer_offsets-34 -> List(0), __consumer_offsets-10 -> List(0), __consumer_offsets-32 -> List(0), __consumer_offsets-40 -> List(0))) (kafka.controller.KafkaController)
[2020-03-21 18:34:58,448] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2020-03-21 18:34:58,448] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-03-21 18:36:50,152] DEBUG [Controller id=0] Delete topics listener fired for topics dev1 to be deleted (kafka.controller.KafkaController)
[2020-03-21 18:36:50,153] INFO [Controller id=0] Starting topic deletion for topics dev1 (kafka.controller.KafkaController)
[2020-03-21 18:36:50,155] INFO [Topic Deletion Manager 0] Handling deletion for topics dev1 (kafka.controller.TopicDeletionManager)
[2020-03-21 18:36:50,158] INFO [Topic Deletion Manager 0] Deletion of topic dev1 (re)started (kafka.controller.TopicDeletionManager)
[2020-03-21 18:36:50,159] INFO [Topic Deletion Manager 0] Topic deletion callback for dev1 (kafka.controller.TopicDeletionManager)
[2020-03-21 18:36:50,167] INFO [Topic Deletion Manager 0] Partition deletion callback for dev1-0 (kafka.controller.TopicDeletionManager)
[2020-03-21 18:36:50,304] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=dev1,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-03-21 18:36:50,306] DEBUG [Topic Deletion Manager 0] Deletion started for replicas [Topic=dev1,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-03-21 18:36:50,309] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=dev1,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-03-21 18:36:50,442] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(dev1-0 -> KAFKA_STORAGE_ERROR) (kafka.controller.KafkaController)
[2020-03-21 18:36:50,446] DEBUG [Topic Deletion Manager 0] Deletion failed for replicas [Topic=dev1,Partition=0,Replica=0]. Halting deletion for topics Set(dev1) (kafka.controller.TopicDeletionManager)
[2020-03-21 18:36:50,453] INFO [Topic Deletion Manager 0] Halted deletion of topics dev1 due to replica deletion failure (kafka.controller.TopicDeletionManager)
[2020-03-21 18:36:50,453] INFO [Topic Deletion Manager 0] Handling deletion for topics dev1 (kafka.controller.TopicDeletionManager)
[2020-03-21 18:36:50,455] INFO [Topic Deletion Manager 0] Retrying deletion of topic dev1 since replicas [Topic=dev1,Partition=0,Replica=0] were not successfully deleted (kafka.controller.TopicDeletionManager)
[2020-03-21 18:36:50,508] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=dev1,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-03-21 18:42:37,898] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-03-21 18:42:53,820] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-03-21 18:42:53,943] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-03-21 18:42:53,943] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-03-21 18:42:53,960] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-03-21 18:42:53,973] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-03-21 18:42:53,980] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-03-21 18:42:54,090] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 24) (kafka.controller.KafkaController)
[2020-03-21 18:42:54,100] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2020-03-21 18:42:54,116] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-03-21 18:42:54,136] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-03-21 18:42:54,138] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2020-03-21 18:42:54,139] INFO [Controller id=0] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2020-03-21 18:42:54,139] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-03-21 18:42:54,140] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-03-21 18:42:54,145] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-03-21 18:42:54,146] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-03-21 18:42:54,147] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-03-21 18:42:54,148] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-03-21 18:42:54,149] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-03-21 18:42:54,180] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-03-21 18:42:54,183] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-03-21 18:42:54,199] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-03-21 18:42:54,200] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2020-03-21 18:42:54,202] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-03-21 18:42:54,204] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-03-21 18:42:54,217] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2020-03-21 18:42:54,218] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-03-21 18:42:54,220] INFO [RequestSendThread controllerId=0] Controller 0 connected to DESKTOP-Q5N5HTN:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-03-21 18:42:54,238] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-03-21 18:42:54,239] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-03-21 18:42:54,240] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-03-21 18:42:54,240] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-03-21 18:42:54,244] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-03-21 18:42:54,299] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-03-21 18:42:59,302] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-03-21 18:42:59,302] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-03-21 18:42:59,329] DEBUG [Controller id=0] Preferred replicas by broker HashMap() (kafka.controller.KafkaController)
[2020-03-21 18:43:14,379] INFO [Controller id=0] New topics: [Set(dev1)], deleted topics: [Set()], new partition replica assignment [Map(dev1-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-03-21 18:43:14,379] INFO [Controller id=0] New partition creation callback for dev1-0 (kafka.controller.KafkaController)
[2020-03-21 18:43:54,515] INFO [Controller id=0] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-03-21 18:43:54,529] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
